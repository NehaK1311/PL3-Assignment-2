/* Existing styles */

/* Hamburger menu styles */
.burger {
    display: none;
    flex-direction: column;
    cursor: pointer;
}

.line {
    width: 25px;
    height: 3px;
    background-color: #333;
    margin: 3px;
}

/* Responsive design */
@media screen and (max-width: 768px) {
    .burger {
        display: flex;
        position: absolute;
        top: 20px;
        right: 20px;
    }

    .nav-links {
        display: none;
        position: absolute;
        background-color: white;
        width: 100%;
        top: 60px;
        left: 0;
        text-align: center;
    }

    .nav-links.active {
        display: flex;
        flex-direction: column;
    }
}
    /*is part of a media query that specifies styling rules to be applied when the screen width is at most 768 pixels. This is commonly used for implementing responsive design to adapt the layout and appearance of elements for smaller screens, such as mobile devices. Let's break down each part of the code:
-----------------------------------------------------------------------------------------

1. @media screen and (max-width: 768px) { ... }

-->This is a media query declaration that targets screens with a maximum width of 768 pixels.
It encapsulates the CSS rules inside the curly braces { ... }, which will only be applied when the specified condition is met (in this case, when the screen width is 768 pixels or less).
----------------------------------------------------------------------------------------

2] .burger { ... }

-->This targets HTML elements with the class "burger". In your case, it's likely targeting the hamburger menu icon element.
Inside the .burger rule block:
----------------------------------------------------------------------------------------

3] display: flex;: This sets the display property of the "burger" element to "flex".

-->This ensures that the three lines of the hamburger menu icon are displayed in a row (horizontally) when the screen width is 768 pixels or less.
position: absolute;: This positions the "burger" element absolutely within its nearest positioned ancestor.

This means the "burger" element's position will be fixed with respect to the screen, not affecting the document flow.
top: 20px; and right: 20px;: These properties specify the positioning of the "burger" element.

The "top" property places the element 20 pixels from the top edge of its containing element or the screen.
The "right" property places the element 20 pixels from the right edge of its containing element or the screen.
These values are used to provide some spacing from the top-right corner of the screen.
So, when the screen width is 768 pixels or less, the ".burger" element (hamburger menu icon) will be displayed as a flex container with its lines in a row. It will be positioned absolutely at the specified top and right distances from the top-right corner of the screen. This is a common approach to positioning the hamburger menu icon in a mobile-friendly navigation design.
*/

/*-----------------------------------XXXX-----------------------------------------------*/
/*.nav-links.active {
        display: flex;
        flex-direction: column;
    }
    
.nav-links.active { ... }

This targets HTML elements with the class "nav-links" that also have the class "active".
Inside the .nav-links.active rule block:

display: flex;: This sets the display property of the targeted "nav-links" elements to "flex".

This ensures that the navigation links will be displayed in a flex container when the "active" class is applied.
flex-direction: column;: This sets the direction of the flex container to "column".

This means the navigation links will be displayed vertically in a column, one below the other, when the "active" class is applied.
When used in combination with JavaScript, the idea is that when the hamburger menu is clicked (toggling the "active" class on the navigation links), the CSS rule .nav-links.active will take effect, causing the navigation links to be displayed as a vertical column, which is a common mobile-friendly navigation design pattern. This layout change ensures that the links are easy to interact with on smaller screens while conserving space.*/

